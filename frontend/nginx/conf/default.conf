
# HTTP - Redirect all traffic to HTTPS
server {
    listen 80;
    server_name nor5-server.eddi.cloud;

    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirect HTTP to HTTPS
    return 301 https://$host$request_uri;
}
# use only the first conf 'http' run the comose and run this command,
# $ docker compose run --rm  certbot certonly --webroot 
# --webroot-path /var/www/certbot/ -d nor5-server.eddi.cloud
# add the conf 'https' below 
# and restart the frontend container
# renew 
# docker compose run --rm certbot renew

# HTTPS Configuration
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name nor5-server.eddi.cloud;

    ssl_certificate /etc/nginx/ssl/live/nor5-server.eddi.cloud/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/nor5-server.eddi.cloud/privkey.pem;
    
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;

    # SSL headers for security
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options "nosniff";
    add_header X-Frame-Options "DENY";
    add_header X-XSS-Protection "1; mode=block";

    # Location for certbot challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Frontend static files
    location / {
        root /usr/share/nginx/html;
        try_files $uri /index.html;
    }
    location /images/ {
 	root /usr/share/nginx/html;


	access_log off;
    }

    # PHP Backend API
    location /api/ {
        proxy_pass http://backend:8000; # Replace 'backend' with your backend service name
	proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        #Restricting Access for the api with Authentification
        auth_basic           "Administrator’s Area";
        auth_basic_user_file /etc/nginx/.htpasswd;


        error_page 502 = @static;
    }
    location /adminer/ {
        proxy_pass http://adminer:8000;
        #Restricting Access for the api with Authentification
        auth_basic           "Administrator’s Area";
        auth_basic_user_file /etc/nginx/.htpasswd;

    }


    # Static fallback
    location @static {
        root /usr/share/nginx/html;
        try_files $uri /index.html;
    }
}

