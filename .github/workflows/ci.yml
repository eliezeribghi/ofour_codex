name: check ofour
run-name: ${{ github.actor }}

on:
  workflow_dispatch:  # Déclenchement manuel via GitHub avec des inputs
    inputs:
      version:
        description: 'Nom de la branche à déployer'  # Description de l'input
        required: true  # Cet input est obligatoire
        default: 'latest'  # Valeur par défaut si l'utilisateur ne fournit rien
      
  push:
    branches:
      - github-actions  # Déclenchement automatique lors d'un push sur la branche 'github-actions'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Cloner le dépôt
        uses: actions/checkout@v4

      - name: Installer Docker Compose
        run: |
         sudo apt-get update
         sudo apt-get install -y docker-compose

      - name: Démarrer les conteneurs Docker
        run: docker-compose up -d

      - name: Attendre que les conteneurs backend, frontend et MySQL soient prêts
        run: |
          echo "Vérification du démarrage des conteneurs..."
          
          CONTAINERS=("backend_container" "frontend_container" "mysql_db")

          all_ready=false

          while [ "$all_ready" = false ]; do
            all_ready=true  # On suppose que tous sont prêts

            for CONTAINER in "${CONTAINERS[@]}"; do
              if [ -z "$(docker ps --filter "name=$CONTAINER" --filter "status=running" -q)" ]; then
                echo "$CONTAINER n'est pas encore prêt, on attend..."
                all_ready=false  # Au moins un conteneur n'est pas prêt
              fi
            done
           
            sleep 2
          done
          
          echo "Tous les conteneurs sont prêts !"

      - name: Installation de curl
        run: |
            sudo apt-get update
            sudo apt-get install -y curl

      


      - name: Tester `php artisan serve` à l'intérieur du conteneur backend
        run: |
          docker exec backend_container php artisan serve & sleep 5

      - name: Récupérer l'IP publique
        run: |
         STATUS_CODE=0
          CONTAINER_NAME="frontend_container"
          IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER_NAME)

           while [ "$STATUS_CODE" -ne 200 ]; do
            STATUS_CODE=$(curl -L -o /dev/null -s -w "%{http_code}" http://$IP:5173/)
             echo "En attente du serveur... (Status: $STATUS_CODE)"
             sleep 2
           done

           echo "Le serveur est prêt !"

      - name: Vérifier si MySQL est en cours d'exécution et exécuter la requête SQL
        run: |
             RECETTE=$(docker exec mysql_db mysql -u root -proot -D "ofour" -e "SELECT * FROM recettes WHERE id = 1;" -s -N)
             
             if [ -z "$RECETTE" ]; then
               echo "Aucune recette trouvée avec cet ID."
             else
               echo "Recette récupérée :"
               echo "$RECETTE" | while read -r ligne; do
                 echo "$ligne"
               done
             fi
      - name: test
        run: | 
                   curl http://127.0.0.1:8000/api/recettes/1
      - name: Arrêter Docker Compose après les tests
        run: docker-compose down
         
         
 


    # services:
    #   mysql:
    #     image: mysql:5.7
    #     env:
    #       MYSQL_ROOT_PASSWORD: root
    #       MYSQL_DATABASE: ofour
    #     ports:
    #       - 3306:3306
    #     options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    # steps:
    #   - name: Checkout repository
    #     uses: actions/checkout@v3

    #   - name: Set up Node.js
    #     uses: actions/setup-node@v3
    #     with:
    #       node-version: "16"
    #       registry-url: "https://registry.npmjs.org"

    #   - name: Check if Docker is installed
    #     run: docker --version

    #   - name: Install Docker Compose (if needed)
    #     run: |
    #       if ! [ -x "$(command -v docker-compose)" ]; then
    #         sudo curl -L "https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    #         sudo chmod +x /usr/local/bin/docker-compose
    #       fi
    #       docker-compose --version

    #   - name: Stop system MySQL (if running)
    #     run: sudo systemctl stop mysql || true

    #   - name: Start MySQL container
    #     run: |
    #       docker run --name my-mysql -e MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}" -e MYSQL_DATABASE=ofour -p 3307:3306 -d mysql:5.7

    #   - name: Copy .env file
    #     run: |
    #      printf "%s" "${{ secrets.MY_ENV_FILE }}" > ./backend/.env

    #   - name: Configure environment (MySQL details)
    #     run: |
         
    #      echo "DB_CONNECTION=mysql" >> ./backend/.env
    #      echo "DB_HOST=mysql" >> ./backend/.env
    #      echo "DB_PORT=3306" >> ./backend/.env
    #      echo "DB_DATABASE=ofour" >> ./backend/.env
    #      echo "DB_USERNAME=user_db" >> ./backend/.env
    #      echo "DB_PASSWORD=M0tDeP@ssSecur3!" >> ./backend/.env
    #      echo "MYSQL_ROOT_PASSWORD=root" >> ./backend/.env
    #      echo "ADMINER_DEFAULT_SERVER=mysql" >> ./backend/.env
    #      echo "Environment variables set successfully."


    #   - name: Set up PHP
    #     uses: shivammathur/setup-php@v2
    #     with:
    #       php-version: '8.2'
    #       extensions: mbstring, xml, bcmath, curl, zip

    #   - name: Install Composer dependencies
    #     working-directory: ./backend
    #     run: composer install --prefer-dist --no-progress --no-suggest --no-interaction

    #   - name: Set Laravel .env DB_HOST
    #     run: echo "DB_HOST=mysql" >> ./backend/.env

    #   - name: Generate APP_KEY
    #     working-directory: ./backend
    #     run: php artisan key:generate

    #   - name: Run database migrations
    #     working-directory: ./backend
    #     run: php artisan status

    #   - name: Run tests
    #     working-directory: ./backend
    #     run: php artisan test

  # sonarqube:
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Install SonarScanner
  #       run: |
  #         curl -Lo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
  #         unzip sonar-scanner.zip
  #         echo "$PWD/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

  #     - name: Start SonarQube
  #       run: |
  #         docker run -d --name sonar \
  #         -p 9003:9000 \
  #         -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
  #         sonarqube:lts
  #         sleep 30

  #     - name: Wait for SonarQube
  #       run: |
  #         until curl -s http://localhost:9003/api/system/status | grep -q "OK"; do
  #           echo "Waiting for SonarQube..."
  #           sleep 5
  #         done
  #         echo "SonarQube is ready!"

  #     - name: Run SonarScanner (Backend)
  #       working-directory: ./backend
  #       run: |
  #         sonar-scanner \
  #           -Dsonar.host.url="http://localhost:9003" \
  #           -Dsonar.login="${{ secrets.SONAR_TOKEN }}"

  #     - name: Run SonarScanner (Frontend)
  #       working-directory: ./frontend
  #       run: |
  #         sonar-scanner \
  #           -Dsonar.host.url="http://localhost:9003" \
  #           -Dsonar.login="${{ secrets.SONAR_TOKEN }}"
