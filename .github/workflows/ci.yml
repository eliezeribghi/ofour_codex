name: check ofour
run-name: ${{ github.actor }}

on:
  workflow_dispatch:  
    inputs:
      branch_name:
        description: 'Workflow test'  
        required: true  
        default: 'sonarqube'
      tags:
        description: 'Test'

  push:
    branches:
      - github-actions  

jobs:
  analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Analyze with SonarQube

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarqube-scan-action@v1.1.0
        uses: SonarSource/sonarqube-scan-action@7295e71c9583053f5bf40e9d4068a0c974603ec8
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_USER}}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on SonarQube, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
          SONAR_HOST_URL: localhost   # add the URL of your instance to the secrets of this repo with the name SONAR_HOST_URL (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the sonarcloud scanner
          args:
            # Unique key of your project. You can find it in SonarQube > [my project] > Project Information (top-right menu)
            # mandatory
            -Dsonar.projectKey=${{ vars.PROJECT_KEY }}
            # Comma-separated paths to directories containing main source files.
            #-Dsonar.sources= # optional, default is project base directory
            # When you need the analysis to take place in a directory other than the one from which it was launched
            #-Dsonar.projectBaseDir= # optional, default is .
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
            #-Dsonar.verbose= # optional, default is false

  build-container:
    needs: analysis
    runs-on: ubuntu-latest
    steps:
      - name: Cloner le dépôt
        uses: actions/checkout@v4

      - name: Installer Docker Compose
        run: |
         sudo apt-get update
         sudo apt-get install -y docker-compose

      - name: Démarrer les conteneurs Docker
        run: docker-compose up -d

      - name: Attendre que les conteneurs backend, frontend et MySQL soient prêts
        run: |
          echo "Vérification du démarrage des conteneurs..."
          
          CONTAINERS=("backend_container" "frontend_container" "mysql_db")

          all_ready=false

          while [ "$all_ready" = false ]; do
            all_ready=true  # On suppose que tous sont prêts

            for CONTAINER in "${CONTAINERS[@]}"; do
              if [ -z "$(docker ps --filter "name=$CONTAINER" --filter "status=running" -q)" ]; then
                echo "$CONTAINER n'est pas encore prêt, on attend..."
                all_ready=false  # Au moins un conteneur n'est pas prêt
              fi
            done

            sleep 2
          done

          echo "Tous les conteneurs sont prêts !"

      - name: Tester le Frontend dans son conteneur
        run: |
          docker exec frontend_container  npm run dev & sleep 5

      

      - name: Tester `php artisan serve` à l'intérieur du conteneur backend
        run: |
          docker exec backend_container php artisan serve & sleep 5
      - name: Récupérer l'IP publique
        run: |
         STATUS_CODE=0
        


          CONTAINER_NAME="frontend_container"
          IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER_NAME)

           while [ "$STATUS_CODE" -ne 200 ]; do
            STATUS_CODE=$(curl -L -o /dev/null -s -w "%{http_code}" http://$IP:5173/)
             echo "En attente du serveur... (Status: $STATUS_CODE)"
             sleep 2
           done

           echo "Le serveur est prêt !"
      - name: Vérifier si MySQL est en cours d'exécution et exécuter la requête SQL
        run: |
             
             
             # Exécuter une requête SQL et récupérer une recette
             RECETTE=$(docker exec mysql_db mysql -u root -proot -D "ofour" -e "SELECT * FROM recettes WHERE id = 1;" -s -N)
             
             # Vérifier si la requête a renvoyé un résultat
             if [ -z "$RECETTE" ]; then
               echo "Aucune recette trouvée avec cet ID."
             else
               echo "Recette récupérée : $RECETTE"
             fi
         
         
      - name: Arrêter Docker Compose après les tests
        run: docker-compose down