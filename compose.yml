services:
#   frontend:
#     image: nor5/kourou-frontend-api
      
#     container_name: frontend_container
#     restart: always
#     ports:
#       - "800:800"
#       - "4433:4433" 
   
#     volumes:
#       - ./nginx/.htpasswd:/etc/nginx/.htpasswd
#       - ./images:/usr/share/nginx/html/images
#       - ./nginx/conf/front/:/etc/nginx/conf.d/ 
#       - ./certbot/www:/var/www/certbot/:ro
#       - ./certbot/conf/:/etc/nginx/ssl/:ro
#     networks:
#       - frontend-network
#         #depends_on:
#         # - backend
#     env_file:
#       - path: .env
 
#   certbot:
#     image: certbot/certbot:latest
#     networks:
#       - frontend-network
#     volumes:
#       - ./certbot/www/:/var/www/certbot/:rw
#       - ./certbot/conf/:/etc/letsencrypt/:rw
#         # command: ["certonly", "--webroot", "--webroot-path", "/var/www/certbot/", "-d", "nor5-server.eddi.cloud"]
  backend:
    image: nor5/nginx-backend
      
    container_name: backend
    restart: always
    ports:
      - "8000:8000"
    env_file:
      - path: .env
    volumes:
      - ./backend/public:/var/www/app/public
    networks:
      - db-network
      - backend-network
    
    depends_on:
      mysql:
        condition: service_healthy

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./nginx/conf/back/:/etc/nginx/conf.d/back/
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro 
      - ./backend/public:/var/www/app/public
    depends_on:
      - backend
    networks:
      - backend-network
    ports:
      - "80:80"
      - "443:443"


  adminer:
    image: adminer
    container_name: adminer
    restart: always
    
    ports:
      - "8080:8080"
   # networks:
      #- db-network 
      #- backend-network
    env_file:
      - path: .env
  
   # depends_on:
     # - mysql
  mysql:
    image: mysql:9.2
    container_name: mysql_db
    ports:
      - "3306:3306"
    env_file:
      - path: .env
   
    volumes:
      - ./bdd/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db_data:/var/lib/mysql
    networks:
      - db-network
    healthcheck:
        test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}"] # command to run
        interval: 10s # Frequency every 10 seconds
        timeout: 5s # if no response after 5s the test is considred failed 
        retries: 5 # 5 retries before considering the test failed 
        start_period: 30s


  prometheus:
    image: prom/prometheus
    container_name: prometheus

    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/web-config.yml:/etc/prometheus/web-config.yml
      - ./certbot/conf/:/etc/prometheus/ssl/

    ports:
      - "9090:9090/tcp"
   
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.external-url=https://nor5-server.eddi.cloud'
      - '--web.config.file=/etc/prometheus/web-config.yml' 
    depends_on:
      - cadvisor 



  cadvisor:
     image: gcr.io/cadvisor/cadvisor:latest
     container_name: cadvisor
     ports:
       - "8080:8080"
    
     volumes:
       - /:/rootfs:ro
       - /var/run:/var/run:rw
       - /sys:/sys:ro
       - /var/lib/docker/:/var/lib/docker:ro
       - /dev/zfs:/dev/zfs
     
      
    

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    expose:
      - 9100
    
    

  grafana:
    image: grafana/grafana
    container_name: grafana
    user: "0"
    ports:
      - "3000:3000"
    env_file:
      - path: .env
    volumes:
      - ./grafana-volume:/var/lib/grafana
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./certbot/conf/live/nor5-server.eddi.cloud/:/etc/grafana/

    depends_on:
      - prometheus
      - cadvisor

  volumes:
    db_data:
  networks:
    db-network:
    #backend-network:
  #frontend-network:
